import unittest
from unittest.mock import patch
from src.sketch_generation.generation import *

Feature = Union[dlplan.Boolean, dlplan.Numerical]


class SketchGeneration(unittest.TestCase):
    def test_condition_generation(self):
        self.assertEqual([[]], list(possible_conditions([], [])))

        pcs = [[CBAny('b1'), CBAny('b2')],
               [CBAny('b1'), CNegative('b2')],
               [CBAny('b1'), CPositive('b2')],
               [CNegative('b1'), CBAny('b2')],
               [CNegative('b1'), CNegative('b2')],
               [CNegative('b1'), CPositive('b2')],
               [CPositive('b1'), CBAny('b2')],
               [CPositive('b1'), CNegative('b2')],
               [CPositive('b1'), CPositive('b2')]]
        self.assertEqual(pcs, list(possible_conditions(['b1', 'b2'], [])))

        pcs2 = [[CNAny('n1'), CNAny('n2')],
                [CNAny('n1'), CZero('n2')],
                [CNAny('n1'), CGreater('n2')],
                [CZero('n1'), CNAny('n2')],
                [CZero('n1'), CZero('n2')],
                [CZero('n1'), CGreater('n2')],
                [CGreater('n1'), CNAny('n2')],
                [CGreater('n1'), CZero('n2')],
                [CGreater('n1'), CGreater('n2')]]
        self.assertEqual(pcs2, list(possible_conditions([], ['n1', 'n2'])))

        pcs3 = [[CNAny('n1'), CBAny('b1')],
                [CNAny('n1'), CNegative('b1')],
                [CNAny('n1'), CPositive('b1')],
                [CZero('n1'), CBAny('b1')],
                [CZero('n1'), CNegative('b1')],
                [CZero('n1'), CPositive('b1')],
                [CGreater('n1'), CBAny('b1')],
                [CGreater('n1'), CNegative('b1')],
                [CGreater('n1'), CPositive('b1')]]

        self.assertEqual(pcs3, list(possible_conditions(['b1'], ['n1'])))

    def test_effect_generation(self):

        pes: list[tuple[Effect, Effect]] = [
               (ENAny('n1'), EPositive('b1')),
               (ENAny('n1'), ENegative('b1')),
               (ENAny('n1'), EBEqual('b1')),
               (EIncr('n1'), EBAny('b1')),
               (EIncr('n1'), EPositive('b1')),
               (EIncr('n1'), ENegative('b1')),
               (EIncr('n1'), EBEqual('b1')),
               (EDecr('n1'), EBAny('b1')),
               (EDecr('n1'), EPositive('b1')),
               (EDecr('n1'), ENegative('b1')),
               (EDecr('n1'), EBEqual('b1')),
               (ENEqual('n1'), EBAny('b1')),
               (ENEqual('n1'), EPositive('b1')),
               (ENEqual('n1'), ENegative('b1')),
               (ENEqual('n1'), EBEqual('b1'))]

        self.assertEqual(set(pes), set(list(possible_effects([CNAny('n1'), CBAny('b1')]))))

        self.assertEqual([(EIncr(feature='n1'),),
                          (ENEqual(feature='n1'),)], list(possible_effects([CZero('n1')])))

        self.assertEqual([(EIncr(feature='n1'),),
                          (EDecr(feature='n1'),),
                          (ENEqual(feature='n1'),)], list(possible_effects([CGreater('n1')])))

        self.assertEqual([(EPositive(feature='b1'),),
                          (EBEqual(feature='b1'),)], list(possible_effects([CNegative('b1')])))

        self.assertEqual([(ENegative(feature='b1'),),
                          (EBEqual(feature='b1'),)], list(possible_effects([CPositive('b1')])))

    def test_sketch_generation(self):
        expected_sketches = [(([CBAny(feature='b1')], (EPositive(feature='b1'),)),),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),),
         (([CPositive(feature='b1')], (EBAny(feature='b1'),)),),
         (([CPositive(feature='b1')], (ENegative(feature='b1'),)),),
         (([CPositive(feature='b1')], (EBEqual(feature='b1'),)),),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CBAny(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EPositive(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CNegative(feature='b1')], (EBEqual(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),))),
         (([CPositive(feature='b1')], (EBAny(feature='b1'),)),
          ([CPositive(feature='b1')], (ENegative(feature='b1'),)),
          ([CPositive(feature='b1')], (EBEqual(feature='b1'),)))]

        # TODO
        # self.assertEqual(len(expected_sketches), sum(1 for _ in generate_sketches(['b1'], [], 3, 1)))
        #self.assertTrue(all([Sketch.from_tuple(tup).rules in [s.rules for s in generate_sketches(['b1'], [], 3)] for tup in expected_sketches]))
        #self.assertTrue(all([s in expected_sketches for s in generate_sketches(['b1'], [], 3)]))


if __name__ == '__main__':
    unittest.main()
